- hosts: all
  gather_facts: false
  tasks:
    - name: Install Python
      ansible.builtin.raw: apt-get install -y python3 python3-debian

- hosts: keyring
  tasks:
    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - jq
          - opensc
          - softhsm
      register: softhsm_install

    - name: Install OpenBao
      ansible.builtin.apt:
        deb: "https://github.com/openbao/openbao/releases/download/v{{ openbao_version }}/bao-hsm_{{ openbao_version}}_linux_{{ openbao_architecture_map[ansible_architecture] }}.deb"

    - name: Add openbao to the softhsm group
      user:
        name: openbao
        groups: softhsm
        append: true

    - name: Generate a softhsm slot
      ansible.builtin.command: sudo -u openbao softhsm2-util --init-token --free --label OpenBao --so-pin 1234 --pin 4321
      when: softhsm_install.changed

    - name: Generate an unseal key
      ansible.builtin.command: sudo -u openbao pkcs11-tool --module /usr/lib/softhsm/libsofthsm2.so --token-label OpenBao --so-pin 1234 --pin 4321 --keypairgen --key-type rsa:4096 --label bao-root-key-rsa
      when: softhsm_install.changed

    - name: Add OpenBao config
      ansible.builtin.copy:
        dest: /etc/openbao/openbao.hcl
        src: openbao.hcl

    - name: Enable OpenBao
      ansible.builtin.service:
        name: openbao
        enabled: true
        state: started

    - name: Initialize OpenBao
      ansible.builtin.shell: bao operator init -address http://localhost:8200 -format=json | jq -r .root_token > /root/.vault-token
      args:
        creates: /root/.vault-token
      register: init_openbao

    - name: Download root token
      ansible.builtin.fetch:
        dest: files/fetch
        src: /root/.vault-token

    - name: Add kv2 secrets path
      ansible.builtin.command: bao secrets enable -address http://localhost:8200 -version=2 kv
      when: init_openbao.changed
  vars:
      openbao_version: 2.3.1
      openbao_architecture_map:
        x86_64: amd64

- hosts: db
  tasks:
    - name: Add Percona repo
      ansible.builtin.apt:
        deb: "https://repo.percona.com/apt/percona-release_latest.{{ ansible_distribution_release }}_all.deb"

    - name: Add Percona PostgreSQL repo
      ansible.builtin.command: percona-release setup ppg-17
      args:
        creates: /etc/apt/sources.list.d/percona-ppg-17-release.list

    - name: Add PGDG repo
      ansible.builtin.deb822_repository:
        name: pgdg
        types: deb
        uris: https://apt.postgresql.org/pub/repos/apt
        suites: bookworm-pgdg
        components: main
        signed_by: https://www.postgresql.org/media/keys/ACCC4CF8.asc

    - name: Create createcluster config dir
      ansible.builtin.file:
        path: /etc/postgresql-common/createcluster.d
        state: directory
        recurse: true

    - name: Do not create a main cluster by default
      ansible.builtin.copy:
        dest: /etc/postgresql-common/createcluster.d/no-main.conf
        src: no-main.conf

    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - openssh-server
          - patroni
          - percona-pgbackrest
          - percona-postgresql-17
        cache_valid_time: 1

    - name: Disable PgBackRest server
      ansible.builtin.service:
        name: percona-pgbackrest
        enabled: false
        state: stopped

    - name: Generate SSH keypair for PgBackRest
      ansible.builtin.user:
        name: postgres
        generate_ssh_key: true

    - name: Download public key
      ansible.builtin.fetch:
        dest: files/fetch
        src: /var/lib/postgresql/.ssh/id_rsa.pub

    # TODO: We could download the fingerprint instead
    - name: Automatically accept fingerprints from new SSH hosts
      ansible.builtin.copy:
        dest: /var/lib/postgresql/.ssh/config
        src: ssh_config

    - name: Add PgBackRest config
      ansible.builtin.copy:
        dest: /etc/pgbackrest.conf
        src: pgbackrest-pg.conf

    - name: Add Patroni config
      ansible.builtin.template:
        dest: /etc/patroni/config.yml
        src: patroni.yml.j2
        mode: "600"
        owner: postgres
      vars:
        secret: hunter2

    - name: Add OpenBao root token
      ansible.builtin.copy:
        dest: /var/lib/postgresql/vault-token
        src: fetch/keyring/root/.vault-token
        owner: postgres
        mode: '0600'

    - name: Add cluster setup script
      ansible.builtin.copy:
        dest: /usr/local/bin/setup_cluster.sh
        src: setup_cluster.sh
        mode: "775"

    - name: Create /root/.config/patroni
      ansible.builtin.file:
        path: /root/.config/patroni
        state: directory
        recurse: true

    - name: Add patronictl config
      ansible.builtin.copy:
        dest: /root/.config/patroni/patronictl.yaml
        src: patronictl.yaml
        mode: "600"

    - name: Start Patroni
      ansible.builtin.service:
        name: patroni
        state: started

- hosts: etcd
  tasks:
    - name: Install etcd
      ansible.builtin.apt:
        name: etcd-server

    - name: Add etcd config
      ansible.builtin.template:
        dest: /etc/default/etcd
        src: etcd.j2
      notify: Restart etcd
  handlers:
    - name: Restart etcd
      service:
        name: etcd
        state: restarted

- hosts: pgbackrest
  tasks:
    - name: Add Percona repo
      ansible.builtin.apt:
        deb: "https://repo.percona.com/apt/percona-release_latest.{{ ansible_distribution_release }}_all.deb"

    - name: Add Percona PostgreSQL repo
      ansible.builtin.command: percona-release setup ppg-17
      args:
        creates: /etc/apt/sources.list.d/percona-ppg-17-release.list

    - name: Install PgBackRest
      ansible.builtin.apt:
        name:
          - openssh-server
          - percona-pgbackrest
        cache_valid_time: 1

    - name: Disable PgBackRest server
      ansible.builtin.service:
        name: percona-pgbackrest
        enabled: false
        state: stopped

    - name: Generate SSH keypair for PgBackRest
      ansible.builtin.user:
        name: postgres
        generate_ssh_key: true

    - name: Download public key
      ansible.builtin.fetch:
        dest: files/fetch
        src: /var/lib/postgresql/.ssh/id_rsa.pub

    # TODO: We could download the fingerprint instead
    - name: Automatically accept fingerprints from new SSH hosts
      ansible.builtin.copy:
        dest: /var/lib/postgresql/.ssh/config
        src: ssh_config

    - name: Add authorized keys
      ansible.posix.authorized_key:
        user: postgres
        key: "{{ lookup('file', 'fetch/' + item + '/var/lib/postgresql/.ssh/id_rsa.pub') }}"
      with_items:
        - db1
        - db2

    - name: Add PgBackRest config
      ansible.builtin.copy:
        dest: /etc/pgbackrest.conf
        src: pgbackrest-repo.conf

- hosts: db
  tasks:
    - name: Add authorized key
      ansible.posix.authorized_key:
        user: postgres
        key: "{{ lookup('file', 'fetch/pgbackrest/var/lib/postgresql/.ssh/id_rsa.pub') }}"

- hosts: pgbackrest
  tasks:
    - name: Initialize PgBackRest repo
      ansible.builtin.command: sudo -u postgres pgbackrest --stanza=tde stanza-create
      args:
        creates: /var/lib/pgbackrest/backup/tde/backup.info
